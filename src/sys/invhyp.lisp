;;;; invhype.lisp
(in-package #:chenyi.sys)

(declaim (inline %acosh/f64 %asinh/f64 %atanh/f64))

(defun %acosh/f64 (x)
  (declare (type double-float x)
           (optimize speed (space 0) (safety 0)))
  (cond ((> x (/ 1d0 +GSL-SQRT-DBL-EPSILON+))
         (+ (log x) +ln2+))
        ((> x 2d0)
         (log (- (* 2d0 x)
                 (/ 1d0 (+ (sqrt (- (* x x) 1d0)) x)))))
        ((> x 1d0)
         (let ((tmp 0d0))
           (declare (type double-float tmp)
                    (dynamic-extent tmp))
           (setq tmp (- x 1d0))
           (log1p (+ tmp (sqrt (+ (* 2d0 tmp) (* tmp tmp)))))))
        ((= x 1d0) 0)
        (t nan)))

(defun %asinh/f64 (x)
  (declare (type double-float x)
           (optimize speed (space 0) (safety 0)))
  (let ((a 0d0) (s -1))
    (declare (type double-float a)
             (type fixnum s)
             (dynamic-extent a s))
    (setq a (abs x)
          s (if (minusp x) -1 1))
    (cond ((> a (/ 1d0 +GSL-SQRT-DBL-EPSILON+))
           (* s (+ (log a) +ln2+)))
          ((> a 2d0)
           (* s (log (+ (* 2d0 a)
                        (/ 1d0 (+ a (sqrt (+ (* a a) 1))))))))
          ((> a +GSL-SQRT-DBL-EPSILON+)
           (let ((a2 0d0))
             (declare (type double-float a2)
                      (dynamic-extent a2))
             (setq a2 (* a a))
             (* s (log1p (+ a (/ a2 (+ 1 (sqrt (+ a2 1)))))))))
          (t x))))

(defun %atanh/f64 (x)
  (declare (type double-float x)
           (optimize speed (space 0) (safety 0)))
  (let ((a 0d0) (s -1))
    (declare (type double-float a)
             (type fixnum s)
             (dynamic-extent a s))
    (setq a (abs x)
          s (if (minusp x) -1 1))
    (cond ((> a 1d0) nan)
          ((= a 1d0)
           (if (minusp x) -inf inf))
          ((>= a 0.5d0)
           (* s 0.5d0 (log1p (/ (* 2d0 a)
                                (- 1d0 a)))))
          ((> a +GSL-DBL-EPSILON+)
           (* s 0.5d0 (log1p (+ (* 2d0 a)
                                (/ (* 2d0 a a)
                                   (- 1d0 a))))))
          (t x))))
